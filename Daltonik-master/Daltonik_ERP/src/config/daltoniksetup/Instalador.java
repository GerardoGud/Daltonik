/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package config.daltoniksetup;

import daltonik_erp.PanelIMG;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import modelo.utilidades.Archivos;

/**
 *
 * @author LuisCerv
 */
public class Instalador extends javax.swing.JFrame {
    private final Archivos arc;
    private int x=0;
    private String sql;
    private boolean bnd=true;
    /**
     * Creates new form Instalador
     */
    public Instalador() {
        initComponents();
        this.pFondo.setBounds(0, 0, this.getWidth(),this.getHeight());
        this.repaint();
         setTitle("Daltonik configurador (Modulo Compras)");
        this.tPuerto.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char caracter = e.getKeyChar();
                if (((caracter < '0')
                        || (caracter > '9'))
                        && (caracter != KeyEvent.VK_BACK_SPACE)) {
                    e.consume();
                }
            }
        });
        opciones();
        crearSQL();
        arc= new Archivos();
        this.tServidor.setText("localhost");
        this.tPuerto.setText("1433");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        bInstalar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lTermino = new javax.swing.JLabel();
        lIntro = new javax.swing.JLabel();
        lRuta = new javax.swing.JLabel();
        lAdmon = new javax.swing.JLabel();
        bSiguiente = new javax.swing.JButton();
        bAtras = new javax.swing.JButton();
        tRuta = new javax.swing.JTextField();
        lRuta2 = new javax.swing.JLabel();
        tUsu = new javax.swing.JTextField();
        lUsuario = new javax.swing.JLabel();
        tContra1 = new javax.swing.JTextField();
        lContra1 = new javax.swing.JLabel();
        tContra2 = new javax.swing.JTextField();
        lContra2 = new javax.swing.JLabel();
        lAvisos = new javax.swing.JLabel();
        lConexion = new javax.swing.JLabel();
        tServidor = new javax.swing.JTextField();
        lServidor = new javax.swing.JLabel();
        tPuerto = new javax.swing.JTextField();
        lPuerto = new javax.swing.JLabel();
        tContraSQL = new javax.swing.JTextField();
        lContraSQL = new javax.swing.JLabel();
        tSQL = new javax.swing.JTextField();
        lSQL = new javax.swing.JLabel();
        pFondo = new daltonik_erp.PanelIMG();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Daltonik Instalador (Modulo Compras)");
        setMinimumSize(new java.awt.Dimension(930, 590));
        setResizable(false);
        getContentPane().setLayout(null);

        bInstalar.setText("Configurar");
        bInstalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInstalarActionPerformed(evt);
            }
        });
        getContentPane().add(bInstalar);
        bInstalar.setBounds(800, 470, 110, 32);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/config/Imagenes/Imagen3.png"))); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 500, 60, 60);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("Compras ");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 10, 240, 60);

        lTermino.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lTermino.setForeground(new java.awt.Color(204, 204, 204));
        lTermino.setText("Término");
        getContentPane().add(lTermino);
        lTermino.setBounds(20, 260, 190, 30);

        lIntro.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lIntro.setForeground(new java.awt.Color(255, 255, 255));
        lIntro.setText("Introducción");
        getContentPane().add(lIntro);
        lIntro.setBounds(20, 100, 190, 30);

        lRuta.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lRuta.setForeground(new java.awt.Color(204, 204, 204));
        lRuta.setText("Ruta de instalación");
        getContentPane().add(lRuta);
        lRuta.setBounds(20, 140, 230, 30);

        lAdmon.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lAdmon.setForeground(new java.awt.Color(204, 204, 204));
        lAdmon.setText("Administración ");
        getContentPane().add(lAdmon);
        lAdmon.setBounds(20, 220, 190, 30);

        bSiguiente.setText("Siguiente");
        bSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSiguienteActionPerformed(evt);
            }
        });
        getContentPane().add(bSiguiente);
        bSiguiente.setBounds(680, 470, 110, 32);

        bAtras.setText("Atras");
        bAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAtrasActionPerformed(evt);
            }
        });
        getContentPane().add(bAtras);
        bAtras.setBounds(560, 470, 110, 32);

        tRuta.setEditable(false);
        tRuta.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tRuta.setText("C:\\Daltonik\\");
            tRuta.setEnabled(false);
            tRuta.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    tRutaActionPerformed(evt);
                }
            });
            getContentPane().add(tRuta);
            tRuta.setBounds(340, 60, 510, 40);

            lRuta2.setBackground(new java.awt.Color(0, 102, 51));
            lRuta2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
            lRuta2.setForeground(new java.awt.Color(255, 255, 255));
            lRuta2.setText("Elige la ruta de instalacion");
            lRuta2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
            lRuta2.setOpaque(true);
            getContentPane().add(lRuta2);
            lRuta2.setBounds(320, 20, 590, 120);

            tUsu.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
            tUsu.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    tUsuActionPerformed(evt);
                }
            });
            getContentPane().add(tUsu);
            tUsu.setBounds(340, 60, 510, 40);

            lUsuario.setBackground(new java.awt.Color(0, 102, 51));
            lUsuario.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
            lUsuario.setForeground(new java.awt.Color(255, 255, 255));
            lUsuario.setText("Usuario");
            lUsuario.setVerticalAlignment(javax.swing.SwingConstants.TOP);
            lUsuario.setOpaque(true);
            getContentPane().add(lUsuario);
            lUsuario.setBounds(320, 20, 590, 110);

            tContra1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
            tContra1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    tContra1ActionPerformed(evt);
                }
            });
            getContentPane().add(tContra1);
            tContra1.setBounds(340, 180, 510, 40);

            lContra1.setBackground(new java.awt.Color(0, 102, 51));
            lContra1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
            lContra1.setForeground(new java.awt.Color(255, 255, 255));
            lContra1.setText("Introduzca su contraseña");
            lContra1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
            lContra1.setOpaque(true);
            getContentPane().add(lContra1);
            lContra1.setBounds(320, 130, 590, 110);

            tContra2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
            tContra2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    tContra2ActionPerformed(evt);
                }
            });
            getContentPane().add(tContra2);
            tContra2.setBounds(340, 290, 510, 40);

            lContra2.setBackground(new java.awt.Color(0, 102, 51));
            lContra2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
            lContra2.setForeground(new java.awt.Color(255, 255, 255));
            lContra2.setText("Repita su contraseña");
            lContra2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
            lContra2.setOpaque(true);
            getContentPane().add(lContra2);
            lContra2.setBounds(320, 240, 590, 120);

            lAvisos.setBackground(new java.awt.Color(0, 102, 51));
            lAvisos.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
            lAvisos.setForeground(new java.awt.Color(255, 255, 255));
            lAvisos.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            lAvisos.setText("Inicio");
            lAvisos.setOpaque(true);
            getContentPane().add(lAvisos);
            lAvisos.setBounds(0, 520, 910, 30);

            lConexion.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
            lConexion.setForeground(new java.awt.Color(204, 204, 204));
            lConexion.setText("Conexión");
            getContentPane().add(lConexion);
            lConexion.setBounds(20, 180, 190, 30);

            tServidor.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
            tServidor.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    tServidorActionPerformed(evt);
                }
            });
            getContentPane().add(tServidor);
            tServidor.setBounds(340, 70, 510, 40);

            lServidor.setBackground(new java.awt.Color(0, 102, 51));
            lServidor.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
            lServidor.setForeground(new java.awt.Color(255, 255, 255));
            lServidor.setText("Servidor");
            lServidor.setVerticalAlignment(javax.swing.SwingConstants.TOP);
            lServidor.setOpaque(true);
            getContentPane().add(lServidor);
            lServidor.setBounds(320, 20, 590, 110);

            tPuerto.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
            tPuerto.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    tPuertoActionPerformed(evt);
                }
            });
            getContentPane().add(tPuerto);
            tPuerto.setBounds(340, 180, 510, 40);

            lPuerto.setBackground(new java.awt.Color(0, 102, 51));
            lPuerto.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
            lPuerto.setForeground(new java.awt.Color(255, 255, 255));
            lPuerto.setText("Puerto");
            lPuerto.setVerticalAlignment(javax.swing.SwingConstants.TOP);
            lPuerto.setOpaque(true);
            getContentPane().add(lPuerto);
            lPuerto.setBounds(320, 130, 590, 110);

            tContraSQL.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
            tContraSQL.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    tContraSQLActionPerformed(evt);
                }
            });
            getContentPane().add(tContraSQL);
            tContraSQL.setBounds(340, 400, 510, 40);

            lContraSQL.setBackground(new java.awt.Color(0, 102, 51));
            lContraSQL.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
            lContraSQL.setForeground(new java.awt.Color(255, 255, 255));
            lContraSQL.setText("Introduzca su contraseña SQL");
            lContraSQL.setVerticalAlignment(javax.swing.SwingConstants.TOP);
            lContraSQL.setOpaque(true);
            getContentPane().add(lContraSQL);
            lContraSQL.setBounds(320, 350, 590, 110);

            tSQL.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
            tSQL.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    tSQLActionPerformed(evt);
                }
            });
            getContentPane().add(tSQL);
            tSQL.setBounds(340, 290, 510, 40);

            lSQL.setBackground(new java.awt.Color(0, 102, 51));
            lSQL.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
            lSQL.setForeground(new java.awt.Color(255, 255, 255));
            lSQL.setText("Usuario SQL");
            lSQL.setVerticalAlignment(javax.swing.SwingConstants.TOP);
            lSQL.setOpaque(true);
            getContentPane().add(lSQL);
            lSQL.setBounds(320, 240, 590, 110);

            javax.swing.GroupLayout pFondoLayout = new javax.swing.GroupLayout(pFondo);
            pFondo.setLayout(pFondoLayout);
            pFondoLayout.setHorizontalGroup(
                pFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 100, Short.MAX_VALUE)
            );
            pFondoLayout.setVerticalGroup(
                pFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 100, Short.MAX_VALUE)
            );

            getContentPane().add(pFondo);
            pFondo.setBounds(0, 390, 100, 100);

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void bInstalarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInstalarActionPerformed
       operaciones();
        //sqlcmd -S myServer\instanceName -i C:\Daltonik\CreacionBD.sql
    }//GEN-LAST:event_bInstalarActionPerformed

    private void bSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSiguienteActionPerformed
        validaciones(true);
        opciones();
    }//GEN-LAST:event_bSiguienteActionPerformed

    private void bAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAtrasActionPerformed
        validaciones(false);
        opciones();
        
    }//GEN-LAST:event_bAtrasActionPerformed

    private void tRutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tRutaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tRutaActionPerformed

    private void tUsuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tUsuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tUsuActionPerformed

    private void tContra1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tContra1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tContra1ActionPerformed

    private void tContra2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tContra2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tContra2ActionPerformed

    private void tPuertoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tPuertoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tPuertoActionPerformed

    private void tServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tServidorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tServidorActionPerformed

    private void tContraSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tContraSQLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tContraSQLActionPerformed

    private void tSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tSQLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tSQLActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Instalador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Instalador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Instalador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Instalador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Instalador().setVisible(true);
            }
        });
    }
    private void ejecutarDIR(){
        String cmd="cmd /c md "+this.tRuta.getText();
        try {
            Runtime.getRuntime().exec(cmd);
            Thread.sleep(1000);
            lAvisos.setText("Ruta creada");
        } catch (IOException e) {
            System.out.println(e.getMessage());
            bnd=false;
            this.lAvisos.setText("Ruta no creada");
        } catch (InterruptedException ex) {
            bnd=false;
            this.lAvisos.setText("Ruta no creada");
            Logger.getLogger(Instalador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void ejecutarBD(){
        String cmd="";
        if(bnd) {
            try {
                Thread.sleep(5000);
                cmd="cmd /c sqlcmd -S localhost\\SQLEXPRESS -i "+this.tRuta.getText()+"CreacionBD.sql";
                Runtime.getRuntime().exec(cmd);
                this.lAvisos.setText("BD creada...");
            } catch (IOException e) {
                System.out.println(e.getMessage());
                bnd = false;
                this.lAvisos.setText("BD no creada...");
            } catch (InterruptedException ex) {
                bnd = false;
                Logger.getLogger(Instalador.class.getName()).log(Level.SEVERE, null, ex);
                this.lAvisos.setText("BD no creada...");
            }
        }else{
            System.out.println("no entro");
        }
    }
    private void ejecutarUsu(){
        String cmd="";
        if(bnd) {
            try {
                Thread.sleep(5000);
                cmd="cmd /c sqlcmd -S localhost\\SQLEXPRESS -i "+this.tRuta.getText()+"Administrador.sql";
                Runtime.getRuntime().exec(cmd);
                Thread.sleep(5000);
                this.lAvisos.setText("Usuario creado...");
            } catch (IOException e) {
                System.out.println(e.getMessage());
                bnd = false;
                this.lAvisos.setText("Usuario no creado...");
            } catch (InterruptedException ex) {
                bnd = false;
                Logger.getLogger(Instalador.class.getName()).log(Level.SEVERE, null, ex);
                this.lAvisos.setText("Usuario no creado...");
            }
        }else{
            System.out.println("no entro");
        }
    }
    private void crearBD(){
        arc.setArchivoRuta(this.tRuta.getText());
            arc.setExtencion(".sql");
            arc.setNombre("CreacionBD");
            sql+= "\n use erp2020\n"
                + "go\n"
                +"insert into tipoUsuario values(1, 'Administrador','A')\n"+
                "INSERT INTO Usuarios VALUES ('" + this.tUsu.getText() + "','" + this.tContra1.getText()
                    + "','A',1,1);";
            arc.GuardarArchivo(sql);
    }
    private void crearUsu(){
        String usu="CREATE LOGIN "+this.tUsu.getText()+" WITH PASSWORD = '"+this.tContra1.getText()+"'\n" +
            "CREATE USER "+this.tUsu.getText()+" FOR LOGIN "+this.tUsu.getText()+" ;  \n" +
            "alter server role sysadmin add member "+this.tUsu.getText()+";\n";
        arc.setArchivoRuta(this.tRuta.getText());
            arc.setExtencion(".sql");
            arc.setNombre("Administrador");
            arc.GuardarArchivo(usu);
    }
    private void crearConfig(){
        String usu="15275"+"\n"+this.tServidor.getText()+"\n"+this.tPuerto.getText()+"\n"+"C:\\Daltonik\\";
        arc.setArchivoRuta(this.tRuta.getText());
            arc.setExtencion(".Daltonik");
            arc.setNombre("Configuracion");
            arc.GuardarArchivo(usu);
    }
    private void validaciones(boolean bnd){
        switch(x){
            case 0://introduccion
                if(bnd){
                    x++;
                }else{
                    x--;
                }
                break;
            case 1://ruta de instalacion
                if (!tRuta.getText().equals("")) {
                    if (bnd) {
                        x++;
                    } else {
                        x--;
                    }
                }else{
                    JOptionPane.showMessageDialog(this, "Es necesario llenar todos los campos", "Campos incompletos", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 2://conexion
                if (!tPuerto.getText().equals("")&!tServidor.getText().equals("")&!tSQL.getText().equals("")&!tContraSQL.getText().equals("")) {
                    if (bnd) {
                        x++;
                    } else {
                        x--;
                    }
                }else{
                    JOptionPane.showMessageDialog(this, "Es necesario llenar todos los campos", "Campos incompletos", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 3://administracion
                if (!tUsu.getText().equals("")&!tContra1.getText().equals("")&!tContra2.getText().equals("")) {
                    if(tContra1.getText().equals(tContra2.getText())) {
                        if (bnd) {
                            x++;
                        } else {
                            x--;
                        }
                    }else{
                        JOptionPane.showMessageDialog(this, "Es necesario que las contraseñas sean completamente iguales", "Contraseña incorrecta", JOptionPane.ERROR_MESSAGE);
                    }
                }else{
                    JOptionPane.showMessageDialog(this, "Es necesario llenar todos los campos", "Campos incompletos", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 4://terminar
                    if(bnd){
                    x++;
                }else{
                    x--;
                }
                break;
        }
    }
    private void opciones(){
        switch(x){
            case 0://introduccion
                lIntro.setForeground(new java.awt.Color(255, 255, 255));
                lRuta.setForeground(new java.awt.Color(204, 204, 204));
                lConexion.setForeground(new java.awt.Color(204, 204, 204));
                lAdmon.setForeground(new java.awt.Color(204, 204, 204));
                lTermino.setForeground(new java.awt.Color(204, 204, 204));
                bAtras.setVisible(false);
                bSiguiente.setVisible(true);
                bInstalar.setVisible(false);
                lRuta2.setVisible(false);
                tRuta.setVisible(false);
                lUsuario.setVisible(false);
                tUsu.setVisible(false);
                lContra1.setVisible(false);
                lContra2.setVisible(false);
                tContra1.setVisible(false);
                tContra2.setVisible(false);
                lPuerto.setVisible(false);
                tPuerto.setVisible(false);
                lServidor.setVisible(false);
                tServidor.setVisible(false);
                tSQL.setVisible(false);
                lSQL.setVisible(false);
                tContraSQL.setVisible(false);
                lContraSQL.setVisible(false);
                break;
            case 1://ruta de instalacion
                lIntro.setForeground(new java.awt.Color(204, 204, 204));
                lRuta.setForeground(new java.awt.Color(255, 255, 255));
                lConexion.setForeground(new java.awt.Color(204, 204, 204));
                lAdmon.setForeground(new java.awt.Color(204, 204, 204));
                lTermino.setForeground(new java.awt.Color(204, 204, 204));
                bAtras.setVisible(true);
                bSiguiente.setVisible(true);
                bInstalar.setVisible(false);
                lRuta2.setVisible(true);
                tRuta.setVisible(true);
                lUsuario.setVisible(false);
                tUsu.setVisible(false);
                lContra1.setVisible(false);
                lContra2.setVisible(false);
                tContra1.setVisible(false);
                tContra2.setVisible(false);
                lPuerto.setVisible(false);
                tPuerto.setVisible(false);
                lServidor.setVisible(false);
                tServidor.setVisible(false);
                tSQL.setVisible(false);
                lSQL.setVisible(false);
                tContraSQL.setVisible(false);
                lContraSQL.setVisible(false);
                break;
            case 2://Conexion
                lIntro.setForeground(new java.awt.Color(204, 204, 204));
                lRuta.setForeground(new java.awt.Color(204, 204, 204));
                lConexion.setForeground(new java.awt.Color(255, 255, 255));
                lAdmon.setForeground(new java.awt.Color(204, 204, 204));
                lTermino.setForeground(new java.awt.Color(204, 204, 204));
                bAtras.setVisible(true);
                bSiguiente.setVisible(true);
                bInstalar.setVisible(false);
                lRuta2.setVisible(false);
                tRuta.setVisible(false);
                lUsuario.setVisible(false);
                tUsu.setVisible(false);
                lContra1.setVisible(false);
                lContra2.setVisible(false);
                tContra1.setVisible(false);
                tContra2.setVisible(false);
                lPuerto.setVisible(true);
                tPuerto.setVisible(true);
                lServidor.setVisible(true);
                tServidor.setVisible(true);
                tSQL.setVisible(true);
                lSQL.setVisible(true);
                tContraSQL.setVisible(true);
                lContraSQL.setVisible(true);
                break;
            case 3://Administracion
                lIntro.setForeground(new java.awt.Color(204, 204, 204));
                lRuta.setForeground(new java.awt.Color(204, 204, 204));
                lConexion.setForeground(new java.awt.Color(204, 204, 204));
                lAdmon.setForeground(new java.awt.Color(255, 255, 255));
                lTermino.setForeground(new java.awt.Color(204, 204, 204));
                bAtras.setVisible(true);
                bSiguiente.setVisible(true);
                bInstalar.setVisible(false);
                lRuta2.setVisible(false);
                tRuta.setVisible(false);
                lUsuario.setVisible(true);
                tUsu.setVisible(true);
                lContra1.setVisible(true);
                lContra2.setVisible(true);
                tContra1.setVisible(true);
                tContra2.setVisible(true);
                lPuerto.setVisible(false);
                tPuerto.setVisible(false);
                lServidor.setVisible(false);
                tServidor.setVisible(false);
                tSQL.setVisible(false);
                lSQL.setVisible(false);
                tContraSQL.setVisible(false);
                lContraSQL.setVisible(false);
                break;
            case 4://termino
                lIntro.setForeground(new java.awt.Color(204, 204, 204));
                lRuta.setForeground(new java.awt.Color(204, 204, 204));
                lConexion.setForeground(new java.awt.Color(204, 204, 204));
                lAdmon.setForeground(new java.awt.Color(204, 204, 204));
                lTermino.setForeground(new java.awt.Color(255, 255, 255));
                bAtras.setVisible(true);
                bSiguiente.setVisible(false);
                bInstalar.setVisible(true);
                lRuta2.setVisible(false);
                tRuta.setVisible(false);
                lUsuario.setVisible(false);
                tUsu.setVisible(false);
                lContra1.setVisible(false);
                lContra2.setVisible(false);
                tContra1.setVisible(false);
                tContra2.setVisible(false);
                lPuerto.setVisible(false);
                tPuerto.setVisible(false);
                lServidor.setVisible(false);
                tServidor.setVisible(false);
                tSQL.setVisible(false);
                lSQL.setVisible(false);
                tContraSQL.setVisible(false);
                lContraSQL.setVisible(false);
                break;
            case 5:
                break;
        }
    }
    private void operaciones() {
        this.lAvisos.setText("Creando ruta...");
        ejecutarDIR();
        this.lAvisos.setText("Creando archivo de configuracion...");
        crearConfig();
        this.lAvisos.setText("Creando usuario...");
        crearUsu();
        this.lAvisos.setText("ejecutando usuario...");
        ejecutarUsu();
        this.lAvisos.setText("Creando archivo BD...");
        crearBD();
        this.lAvisos.setText("ejecutando BD...");
        ejecutarBD();
        this.dispose();
    }
    private void crearSQL(){
        sql="CREATE DATABASE ERP2020\n" +
"GO\n" +
"use ERP2020;\n" +
"go\n" +
"-- ***********************\n" +
"-- TABLAS DE COMPRAS\n" +
"-- ***********************\n" +
"\n" +
"CREATE TABLE Productos(\n" +
"	idProducto INTEGER not null,\n" +
"    nombre VARCHAR(50) not null,\n" +
"    descripcion VARCHAR(100),\n" +
"    puntoReorden INTEGER not null,\n" +
"    precioCompra FLOAT not null,\n" +
"    precioVenta FLOAT not null,\n" +
"    ingredienteActivo VARCHAR(100) not null,\n" +
"    bandaToxicologica VARCHAR(80) not null,\n" +
"    aplicacion VARCHAR(200) not null,\n" +
"    uso VARCHAR(200) not null,\n" +
"    estatus CHAR not null,\n" +
"    idLaboratorio INTEGER not null,\n" +
"    idCategoria INTEGER not null,\n" +
"    CONSTRAINT Productos_PK PRIMARY KEY (idProducto)\n" +
");\n" +
"\n" +
"CREATE TABLE Laboratorios(\n" +
"	idLaboratorio INTEGER not null,\n" +
"    nombre VARCHAR(50) not null,\n" +
"    origen VARCHAR(30) not null,\n" +
"    estatus CHAR not null,\n" +
"    CONSTRAINT Marcas_PK PRIMARY KEY (idLaboratorio)\n" +
");\n" +
"\n" +
"CREATE TABLE Categorias(\n" +
"	idCategoria INTEGER not null,\n" +
"    nombre VARCHAR(30) not null,\n" +
"    estatus CHAR not null,\n" +
"    CONSTRAINT Categorias_PK PRIMARY KEY (idCategoria)\n" +
");\n" +
"\n" +
"CREATE TABLE Empaques(\n" +
"	idEmpaque INTEGER not null,\n" +
"    nombre VARCHAR(80) not null,\n" +
"    capacidad FLOAT not null,\n" +
"    estatus CHAR not null,\n" +
"    idUnidad INTEGER not null,\n" +
"    CONSTRAINT Presentaciones_PK PRIMARY KEY (idEmpaque)\n" +
");\n" +
"\n" +
"CREATE TABLE UnidadMedida(\n" +
"	idUnidad INTEGER not null,\n" +
"    nombre VARCHAR(80) not null,\n" +
"    siglas VARCHAR(20) not null,\n" +
"    estatus CHAR not null,\n" +
"    CONSTRAINT UnidadMedia_PK PRIMARY KEY (idUnidad)\n" +
");\n" +
"\n" +
"CREATE TABLE PresentacionesProducto(\n" +
"	idPresentacion INTEGER not null,\n" +
"    precioCompra FLOAT not null,\n" +
"    precioVenta FLOAT not null,\n" +
"    puntoReorden FLOAT not null,\n" +
"    idProducto INTEGER not null,\n" +
"    idEmpaque INTEGER not null,\n" +
"	estatus CHAR not null,\n" +
"    CONSTRAINT PresentacionesProducto_PK PRIMARY KEY (idPresentacion)\n" +
");\n" +
"\n" +
"CREATE TABLE ExistenciasSucursal(\n" +
"	idPresentacion INTEGER not null,\n" +
"    idSucursal INTEGER not null,\n" +
"    cantidad FLOAT not null,\n" +
"    CONSTRAINT ExistenciasSucursal_PK PRIMARY KEY (idPresentacion, idSucursal)\n" +
");\n" +
"\n" +
"CREATE TABLE Sucursales(\n" +
"	idSucursal INTEGER not null,\n" +
"    nombre VARCHAR(50) not null,\n" +
"    telefono VARCHAR(15),\n" +
"    direccion VARCHAR(80) not null,\n" +
"    colonia VARCHAR(50),\n" +
"    codigoPostal VARCHAR(5),\n" +
"    presupuesto FLOAT,\n" +
"    estatus CHAR not null,\n" +
"    idCiudad INTEGER not null,\n" +
"    CONSTRAINT Sucursales_PK PRIMARY KEY (idSucursal)\n" +
");\n" +
"\n" +
"CREATE TABLE ImagenesProducto(\n" +
"	idImagen INTEGER not null,\n" +
"    nombreImagen VARCHAR(100),\n" +
"    imagen image,\n" +
"    principal CHAR not null,\n" +
"    idProducto INTEGER not null,\n" +
"	estatus CHAR not null,\n" +
"    CONSTRAINT ImagenesProducto_PK PRIMARY KEY (idImagen)\n" +
");\n" +
"\n" +
"CREATE TABLE ProductosProveedor(\n" +
"	idProveedor INTEGER not null,\n" +
"    idPresentacion INTEGER not null,\n" +
"    diasRetardo INTEGER,\n" +
"    precioEstandar FLOAT,\n" +
"    precioUltimaCompra FLOAT,\n" +
"    cantMinPedir INTEGER,\n" +
"    cantMaxPedir INTEGER,\n" +
"	estatus CHAR not null,\n" +
"    CONSTRAINT ProductosProveedor_PK PRIMARY KEY (idProveedor, idPresentacion)\n" +
");\n" +
"\n" +
"CREATE TABLE PedidoDetalle(\n" +
"	idPedidoDetalle INTEGER not null,\n" +
"    cantPedida INTEGER not null,\n" +
"    precioCompra FLOAT not null,\n" +
"    subtotal FLOAT,\n" +
"    cantRecibida INTEGER,\n" +
"    cantRechazada INTEGER,\n" +
"    cantAceptada FLOAT,\n" +
"    idPedido INTEGER not null,\n" +
"    idPresentacion INTEGER not null,\n" +
"	estatus CHAR not null,\n" +
"    CONSTRAINT PedidoDetalle_PK PRIMARY KEY (idPedidoDetalle)\n" +
");\n" +
"\n" +
"CREATE TABLE Pedidos(\n" +
"	idPedido INTEGER not null,\n" +
"    fechaRegistro DATE not null,\n" +
"    fechaRecepcion DATE not null,\n" +
"    totalPagar FLOAT,\n" +
"    cantidadPagada FLOAT,\n" +
"    estatus CHAR not null,\n" +
"    idProveedor INTEGER not null,\n" +
"    idSucursal INTEGER not null,\n" +
"    idEmpleado INTEGER not null,\n" +
"    CONSTRAINT Pedidos_PK PRIMARY KEY (idPedido)\n" +
");\n" +
"\n" +
"CREATE TABLE ContactosProveedor(\n" +
"	idContacto INTEGER not null,\n" +
"    nombre VARCHAR(80) not null,\n" +
"    telefono VARCHAR(12) not null,\n" +
"    email VARCHAR(100) not null,\n" +
"    idProveedor INTEGER not null,\n" +
"	estatus CHAR not null,\n" +
"    CONSTRAINT ContactosProveedor_PK PRIMARY KEY (idContacto)\n" +
");\n" +
"\n" +
"CREATE TABLE Proveedores(\n" +
"	idProveedor INTEGER not null,\n" +
"    nombre VARCHAR(80) not null,\n" +
"    telefono VARCHAR(12) not null,\n" +
"    email VARCHAR(100) not null,\n" +
"    direccion VARCHAR(80) not null,\n" +
"    colonia VARCHAR(50),\n" +
"    codigoPostal VARCHAR(5),\n" +
"    idCiudad INTEGER not null,\n" +
"	estatus CHAR not null,\n" +
"    CONSTRAINT Proveedores_PK PRIMARY KEY (idProveedor)\n" +
");\n" +
"\n" +
"CREATE TABLE CuentasProveedor(\n" +
"	idCuentaProveedor INTEGER not null,\n" +
"    idProveedor INTEGER not null,\n" +
"    noCuenta VARCHAR(10) not null,\n" +
"    banco VARCHAR(30) not null,\n" +
"	estatus CHAR not null,\n" +
"    CONSTRAINT CuentasProveedor_PK PRIMARY KEY (idCuentaProveedor)\n" +
");\n" +
"\n" +
"CREATE TABLE Pagos(\n" +
"	idPago INTEGER not null,\n" +
"    fecha DATE not null,\n" +
"    importe FLOAT not null,\n" +
"    idPedido INTEGER not null,\n" +
"    idFormaPago INTEGER not null,\n" +
"    idCuentaProveedor INTEGER not null,\n" +
"	estatus CHAR not null,\n" +
"    CONSTRAINT Pagos_PK PRIMARY KEY (idPago)\n" +
");\n" +
"\n" +
"-- ******************************\n" +
"CREATE TABLE Ciudades\n" +
"(\n" +
"	idCiudad integer not null,\n" +
"	nombre varchar(80) not null,\n" +
"	idEstado integer,\n" +
"	estatus char not null,\n" +
"	CONSTRAINT PK_Ciudades PRIMARY KEY (idCiudad)\n" +
");\n" +
"\n" +
"create table Estados\n" +
"(\n" +
"	idEstado integer not null,\n" +
"	nombre varchar(60) not null,\n" +
"	siglas varchar(10) not null,\n" +
"	estatus char not null,\n" +
"	constraint PK_Estados primary key (idEstado)\n" +
");\n" +
"\n" +
"create table Incapacidades \n" +
"(\n" +
"	idIncapacidad integer not null,\n" +
"	fechaInicio date not null,\n" +
"	fechaFin date not null,\n" +
"	enfermedad varchar(150) not null,\n" +
"	evidencia VARBINARY(MAX),\n" +
"	idEmpledo integer not null,\n" +
"	estatus CHAR not null,\n" +
"	constraint PK_Incapacidades primary key (idIncapacidad)\n" +
");\n" +
"\n" +
"create table Empleados \n" +
"(\n" +
"	idEmpleado integer not null,\n" +
"	nombre varchar(30) not null,\n" +
"	apaterno varchar(30) not null,\n" +
"	amaterno varchar(30) not null,\n" +
"	sexo char not null,\n" +
"	fechaContratacion date not null,\n" +
"	fechaNacimineto date not null,\n" +
"	salario float not null,\n" +
"	nss varchar(10) not null,\n" +
"	estadoCivil varchar (20) not null,\n" +
"	diasVacaciones integer not null,\n" +
"	diasPermiso integer not null,\n" +
"	fotografia VARBINARY(MAX) not null,\n" +
"	direccion varchar(80) not null,\n" +
"	colonia varchar(50) not null,\n" +
"	codigoPostal varchar(5) not null,\n" +
"	escolaridad varchar (80) not null,\n" +
"	porcentajeComision float not null,\n" +
"	estatus char not null,\n" +
"	idDepartamento integer not null,\n" +
"	idPuesto integer not null,\n" +
"	idCiudad integer not null,\n" +
"	idSucursal integer not null,\n" +
"	constraint PK_Empleados primary key (idEmpleado)\n" +
");\n" +
"\n" +
"create table Horarios \n" +
"(\n" +
"	idHorario integer not null,\n" +
"	horaInicio date not null,\n" +
"	horaFin date not null,\n" +
"	dias varchar (30) not null,\n" +
"	idEmpleado integer not null,\n" +
"	estatus CHAR not null,\n" +
"	constraint PK_Horarios primary key (idHorario)\n" +
");\n" +
"\n" +
"create table AusenciasJustificadas \n" +
"(\n" +
"	idAusencia integer not null,\n" +
"	fechaSolicitud date not null,\n" +
"	fechaInicio date not null,\n" +
"	fechaFin date not null,\n" +
"	tipo char not null,\n" +
"	idEmpleadoS integer not null,\n" +
"	idEmpleadoA integer not null,\n" +
"	estatus char not null,\n" +
"	constraint PK_Ausencias primary key (idAusencia)\n" +
");\n" +
"\n" +
"create table FormasPago\n" +
"(\n" +
"	idFormaPago integer not null,\n" +
"	nombre varchar(50) not null,\n" +
"	estatus char not null,\n" +
"	constraint PK_FormasPago primary key (idFormaPago)\n" +
");\n" +
"\n" +
"Create table DocumentacionEmpleado\n" +
"(\n" +
"	idDocumento integer not null,\n" +
"	nombreDocumento varchar(80) not null,\n" +
"	fechaEntrega date not null,\n" +
"	documento VARBINARY(MAX) not null,\n" +
"	estatus char not null,\n" +
"	idEmpleado Integer not null,\n" +
"	constraint PK_Documentacion primary key(idDocumento)\n" +
");\n" +
"\n" +
"create table Puestos \n" +
"(\n" +
"	idPuesto integer not null,\n" +
"	nombre varchar(60) not null,\n" +
"	salarioMinimo float not null,\n" +
"	salarioMaximo float not null,\n" +
"	estatus char not null,\n" +
"	constraint PK_Puestos primary key (idPuesto)\n" +
");\n" +
"\n" +
"create table Departamentos \n" +
"(\n" +
"	idDepartamento integer not null,\n" +
"	nombre varchar (50) not null,\n" +
"	estatus char not null,\n" +
"	constraint PK_Departamentos primary key (idDepartamento)\n" +
");\n" +
"\n" +
"create table HistorialPuestos\n" +
"(\n" +
"	idEmpleado integer not null,\n" +
"	idPuesto integer not null,\n" +
"	idDepartamento integer not null,\n" +
"	fechaInicio date not null,\n" +
"	fechaFin date not null,\n" +
"	salario float not null,\n" +
"	estatus char not null,\n" +
"	constraint PK_HistorialPuestos primary key(idEmpleado, idPuesto, idDepartamento, fechaInicio)\n" +
");\n" +
"\n" +
"create table Percepciones\n" +
"(\n" +
"	idPercepcion integer not null,\n" +
"	nombre varchar (30) not null,\n" +
"	descripcion varchar (80) not null,\n" +
"	diasPagar integer not null,\n" +
"	estatus CHAR not null,\n" +
"	constraint PK_Percepciones primary key (idPercepcion)\n" +
");\n" +
"\n" +
"create table Nominas\n" +
"(\n" +
"	idNomina integer not null,\n" +
"	fechaPago date not null,\n" +
"	totalP float not null,\n" +
"	totalD float not null,\n" +
"	cantidadNeta float not null,\n" +
"	diasTrabajados integer not null,\n" +
"	faltas integer not null,\n" +
"	fechaInicio date not null,\n" +
"	fechaFin date not null,\n" +
"	idEmpleado integer not null,\n" +
"	idFormaPago integer not null,\n" +
"	estatus CHAR not null,\n" +
"	constraint PK_Nominas primary key (idNomina)\n" +
");\n" +
"\n" +
"create table Deducciones \n" +
"(\n" +
"	idDeduccion integer not null,\n" +
"	nombre varchar (30) not null,\n" +
"	descripcion varchar (80) not null,\n" +
"	porcentaje float not null,\n" +
"	estatus CHAR not null,\n" +
"	constraint PK_Deducciones primary key (idDeduccion)\n" +
");\n" +
"\n" +
"create table NominasDeducciones \n" +
"(\n" +
"	idNomina integer not null,\n" +
"	idDeduccion integer not null,\n" +
"	importe float not null,\n" +
"	estatus char not null,\n" +
"	constraint PK_NominasDeducciones primary key (idNomina, idDeduccion)\n" +
");\n" +
"\n" +
"create table NominasPercepciones  \n" +
"(\n" +
"	idNomina integer not null,\n" +
"	idPercepcion integer not null,\n" +
"	importe float not null,\n" +
"	estatus char not null,\n" +
"	constraint PK_NominasPercepciones primary key (idNomina, idPercepcion)\n" +
");\n" +
"\n" +
"create table Usuarios \n" +
"(\n" +
"	nombre varchar(30) not null,\n" +
"	contrasenia varchar (20) not null,\n" +
"	estatus char not null,\n" +
"	idEmpleado integer not null,\n" +
"	idTipoUsuario integer not null,\n" +
"	constraint PK_Usuarios primary key (nombre)\n" +
");\n" +
"\n" +
"create table TipoUsuario\n" +
"(\n" +
"	idTipoUsuario integer not null,\n" +
"	nombre varchar (80) not null,\n" +
"	estatus char not null,\n" +
"	constraint PK_TipoUsuario primary key (idTipoUsuario)\n" +
");\n" +
"\n" +
"-- **************************\n" +
"create table Ventas\n" +
"(\n" +
"idVenta int not null,\n" +
"fecha date not null,\n" +
"totalPagar float not null,\n" +
"cantPagada float not null,\n" +
"comentarios varchar(100),\n" +
"estatus char not null,\n" +
"tipo char not null,\n" +
"idCliente int not null,\n" +
"idSucursal int not null,\n" +
"idEmpleado int not null,\n" +
"constraint Ventas_PK primary key(idVenta)\n" +
");\n" +
"\n" +
"create table VentasDetalle \n" +
"(\n" +
"idVentaDetalle int not null,\n" +
"precioVenta float not null,\n" +
"cantidad float not null,\n" +
"subtotal float not null,\n" +
"idVenta int not null,\n" +
"idPresentacion int not null,\n" +
"estatus CHAR not null,\n" +
"constraint VentasDetalle_PK primary key(idVentaDetalle)\n" +
");\n" +
"\n" +
"create table OfertasAsociacion\n" +
"(\n" +
"idAsosiacion int not null,\n" +
"idOferta int not null,\n" +
"estatus char not null,\n" +
"constraint OfertasAsociacion_PK primary key(idAsosiacion,idOferta)\n" +
");\n" +
"\n" +
"create table Tripulacion\n" +
"(\n" +
"idEmpleado int not null,\n" +
"idEnvio int not null,\n" +
"rol varchar(50) not null,\n" +
"estatus CHAR not null,\n" +
"constraint Tripulacion_PK primary key(rol,idEmpleado,idEnvio)\n" +
");\n" +
"\n" +
"create table Envios\n" +
"(\n" +
"idEnvio int not null,\n" +
"fechaEntregaPlaneada date not null,\n" +
"fechaEntregaReal date not null,\n" +
"direccion varchar(100) not null,\n" +
"codigoPostal varchar(5) not null,\n" +
"idVenta int not null,\n" +
"idUnidadTransporte int not null,\n" +
"idCiudad int not null,\n" +
"estatus CHAR not null,\n" +
"constraint EnviosVentas_PK primary key(idEnvio)\n" +
");\n" +
"\n" +
"create table Cobros\n" +
"(\n" +
"idCobro int not null,\n" +
"fecha date not null,\n" +
"importe float not null,\n" +
"idVenta int not null,\n" +
"idFormaPago int not null,\n" +
"estatus CHAR not null,\n" +
"constraint Cobros_PK primary key(idCobro)\n" +
");\n" +
"\n" +
"create table Facturas\n" +
"(\n" +
"Folio char not null,\n" +
"subtotal float not null,\n" +
"iva float not null,\n" +
"total float not null,\n" +
"nombreDocXML varchar(100) not null,\n" +
"documentoXML VARBINARY(MAX) not null,\n" +
"nombreDocPDF varchar(100) not null,\n" +
"documentoPDF VARBINARY(MAX) not null,\n" +
"idVenta int not null,\n" +
"estatus CHAR not null,\n" +
"constraint Facturas_PK primary key(Folio)\n" +
");\n" +
"\n" +
"create table Clientes\n" +
"(\n" +
"idCliente int not null,\n" +
"nombre varchar(100) not null,\n" +
"razonSocial varchar(100) not null,\n" +
"limiteCredito float not null,\n" +
"direccion varchar(80) not null,\n" +
"codigoPostal char(5) not null,\n" +
"rfc char(13) not null,\n" +
"telefono char(12),\n" +
"email varchar(100) not null,\n" +
"tipo char not null,\n" +
"idCiudad int not null,\n" +
"estatus CHAR not null,\n" +
"constraint Clientes_PK primary key(idCliente)\n" +
");\n" +
"\n" +
"create table Asociaciones\n" +
"(\n" +
"idAsociacion int not null,\n" +
"nombre varchar(100) not null,\n" +
"estatus char not null,\n" +
"constraint Asociaciones_PK primary key(idAsociacion)\n" +
");\n" +
"\n" +
"create table Miembros\n" +
"(\n" +
"idCliente int not null,\n" +
"idAsociacion int not null,\n" +
"estatus char not null,\n" +
"fechaIncorporacion date not null,\n" +
"constraint Miembros_PK primary key(idAsociacion,idCliente)\n" +
");\n" +
"\n" +
"create table Cultivos\n" +
"(\n" +
"idCultivo int not null,\n" +
"nombre varchar(100) not null,\n" +
"costoAsesoria float not null,\n" +
"estatus char not null,\n" +
"constraint Cultivos_PK primary key(idCultivo)\n" +
");\n" +
"\n" +
"create table ClientesCultivos\n" +
"(\n" +
"idClienteCultivo int not null,\n" +
"extension float not null,\n" +
"ubicacion varchar(100) not null,\n" +
"idCliente int not null,\n" +
"idCultivo int not null,\n" +
"idCiudad int not null,\n" +
"estatus CHAR not null,\n" +
"constraint ClientesCultivos_PK primary key(idClienteCultivo)\n" +
");\n" +
"\n" +
"create table Visitas\n" +
"(\n" +
"idVisita int not null,\n" +
"fechaPlaneada date not null,\n" +
"fechaReal date not null,\n" +
"comentarios varchar(200),\n" +
"estatus char not null,\n" +
"costo float not null,\n" +
"idClienteCultivo int not null,\n" +
"idEmpleado int not null,\n" +
"idUnidadTransporte int not null,\n" +
"constraint Visitas_PK primary key(idVisita)\n" +
");\n" +
"\n" +
"create table UnidadesTransporte\n" +
"(\n" +
"idUnidadTransporte int not null,\n" +
"placas varchar(10) not null,\n" +
"marca varchar(80) not null,\n" +
"modelo varchar(80) not null,\n" +
"año int not null,\n" +
"capacidad int not null,\n" +
"estatus CHAR not null,\n" +
"constraint UnidadesTransporte_PK primary key(idUnidadTransporte)\n" +
");\n" +
"\n" +
"create table Mantenimientos\n" +
"(\n" +
"idMantenimiento int not null,\n" +
"fecha date not null,\n" +
"taller varchar(100) not null,\n" +
"costo float not null,\n" +
"comentarios varchar(200) not null,\n" +
"tipo varchar(30) not null,\n" +
"idUnidadTransporte int not null,\n" +
"estatus CHAR not null,\n" +
"constraint Mantenimientos_PK primary key(idMantenimiento)\n" +
");\n" +
"\n" +
"create table Ofertas(\n" +
"	idOferta INTEGER not null,\n" +
"    nombre VARCHAR(50),\n" +
"    descripcion VARCHAR(100),\n" +
"    porDescuento FLOAT,\n" +
"    fechaInicio DATE not null,\n" +
"    fechaFin DATE not null,\n" +
"    canMinProducto INTEGER not null,\n" +
"    estatus CHAR not null,\n" +
"    idProducto INTEGER not null,\n" +
"    constraint Ofertas_PK PRIMARY KEY (idOferta)\n" +
");\n" +
"\n" +
"-- ******* FOREIGN KEYS COMPRAS *******\n" +
"Alter table Productos add constraint FK_LaboratorioProductos FOREIGN KEY (idLaboratorio) References Laboratorios(idLaboratorio);\n" +
"Alter table Productos add constraint FK_CategoriaProductos FOREIGN KEY (idCategoria) References Categorias(idCategoria);\n" +
"Alter table ImagenesProducto add constraint FK_ProductosImProductos FOREIGN KEY (idProducto) References Productos(idProducto);\n" +
"Alter table ContactosProveedor add constraint FK_ContactosProveedores FOREIGN KEY (idProveedor) References Proveedores(idProveedor);\n" +
"Alter table ProductosProveedor add constraint FK_ProductosProveedor FOREIGN KEY (idProveedor) References Proveedores(idProveedor);\n" +
"Alter table ProductosProveedor add constraint FK_ProdProvPresentaciones FOREIGN KEY (idPresentacion) References PresentacionesProducto(idPresentacion);\n" +
"Alter table PresentacionesProducto add constraint FK_PresentacionesProductos FOREIGN KEY (idProducto) References Productos(idProducto);\n" +
"Alter table PresentacionesProducto add constraint FK_PresentacionesPEmpaques FOREIGN KEY (idEmpaque) References Empaques(idEmpaque);\n" +
"Alter table Empaques add constraint FK_EmpaquesUnidad FOREIGN KEY (idUnidad) References UnidadMedida(idUnidad);\n" +
"Alter table ExistenciasSucursal add constraint FK_ExistSucPresProd FOREIGN KEY (idPresentacion) References PresentacionesProducto(idPresentacion);\n" +
"Alter table ExistenciasSucursal add constraint FK_ExistSucSucursales FOREIGN KEY (idSucursal) References Sucursales(idSucursal);\n" +
"Alter table PedidoDetalle add constraint FK_PedidoDetPedido FOREIGN KEY (idPedido) References Pedidos(idPedido);\n" +
"Alter table PedidoDetalle add constraint FK_PedidoDetPresProd FOREIGN KEY (idPresentacion) References PresentacionesProducto(idPresentacion);\n" +
"Alter table Proveedores add constraint FK_ProveedoresCiudades FOREIGN KEY (idCiudad) References Ciudades(idCiudad);\n" +
"Alter table CuentasProveedor add constraint FK_CuentasProveedores FOREIGN KEY (idProveedor) References Proveedores(idProveedor);\n" +
"Alter table Pagos add constraint FK_PagosPedidos FOREIGN KEY (idPedido) References Pedidos(idPedido);\n" +
//"Alter table Pagos add constraint FK_PagosFormaPagos FOREIGN KEY (idFormaPago) References FormasPago(idFormaPago);\n" +
"Alter table Pagos add constraint FK_PagosCuentaProv FOREIGN KEY (idCuentaProveedor) References CuentasProveedor(idCuentaProveedor);\n" +
"Alter table Pedidos add constraint FK_PedidosProveedor FOREIGN KEY (idProveedor) References Proveedores(idProveedor);\n" +
"Alter table Pedidos add constraint FK_PedidosSucursales FOREIGN KEY (idSucursal) References Sucursales(idSucursal);\n" +
"Alter table Sucursales add constraint FK_SucursalesCiudad FOREIGN KEY (idCiudad) References Ciudades(idCiudad);\n" +
"-- **************\n" +
"\n" +
"-- ******* FOREIGN KEYS RH *******\n" +
"Alter table AusenciasJustificadas add constraint FK_AusenciasJEmpleadosS FOREIGN KEY (idEmpleadoS) References Empleados(idEmpleado);\n" +
"Alter table AusenciasJustificadas add constraint FK_AusenciasJEmpleadosA FOREIGN KEY (idEmpleadoA) References Empleados(idEmpleado);\n" +
"Alter table Horarios add constraint FK_HorariosEmpleados FOREIGN KEY (idEmpleado) References Empleados(idEmpleado);\n" +
"Alter table Empleados add constraint FK_EmpleadosDepartamentos FOREIGN KEY (idDepartamento) References Departamentos(idDepartamento);\n" +
"Alter table Empleados add constraint FK_EmpleadosPuestos FOREIGN KEY (idPuesto) References Puestos(idPuesto);\n" +
"Alter table Empleados add constraint FK_EmpleadosCiudades FOREIGN KEY (idCiudad) References Ciudades(idCiudad);\n" +
"Alter table Empleados add constraint FK_EmpleadosSucursales FOREIGN KEY (idSucursal) References Sucursales(idSucursal);\n" +
"Alter table Ciudades add constraint FK_CiudadesEstados FOREIGN KEY (idEstado) References Estados(idEstado);\n" +
"Alter table Incapacidades add constraint FK_IncapacidadesEmpleados FOREIGN KEY (idEmpledo) References Empleados(idEmpleado);\n" +
"Alter table DocumentacionEmpleado add constraint FK_DocumentacionEmpleados FOREIGN KEY (idEmpleado) References Empleados(idEmpleado);\n" +
"Alter table Nominas add constraint FK_NominasEmpleados FOREIGN KEY (idEmpleado) References Empleados(idEmpleado);\n" +
"Alter table Nominas add constraint FK_NominasFormasPago FOREIGN KEY (idFormaPago) References FormasPago(idFormaPago);\n" +
"Alter table NominasDeducciones add constraint FK_NomDeduccionesNominas FOREIGN KEY (idNomina) References Nominas(idNomina);\n" +
"Alter table NominasDeducciones add constraint FK_NomDeducDeducciones FOREIGN KEY (idDeduccion) References Deducciones(idDeduccion);\n" +
"Alter table HistorialPuestos add constraint FK_HistorialEmpleados FOREIGN KEY (idEmpleado) References Empleados(idEmpleado);\n" +
"Alter table HistorialPuestos add constraint FK_HistorialPuestos FOREIGN KEY (idPuesto) References Puestos(idPuesto);\n" +
"Alter table HistorialPuestos add constraint FK_HistorialDepartamentos FOREIGN KEY (idDepartamento) References Departamentos(idDepartamento);\n" +
"Alter table NominasPercepciones add constraint FK_NomPercNominas FOREIGN KEY (idNomina) References Nominas(idNomina);\n" +
"Alter table NominasPercepciones add constraint FK_NomPercPercepciones FOREIGN KEY (idPercepcion) References Percepciones(idPercepcion);\n" +
"-- **************\n" +
"\n" +
"-- ******* FOREIGN KEYS VENTAS *******\n" +
"Alter table Ofertas add constraint FK_OfertasProductos FOREIGN KEY (idProducto) References Productos(idProducto);\n" +
"Alter table OfertasAsociacion add constraint FK_OfertasAsAsociaciones FOREIGN KEY (idAsosiacion) References Asociaciones(idAsociacion);\n" +
"Alter table OfertasAsociacion add constraint FK_OfertasAsOfertas FOREIGN KEY (idOferta) References Ofertas(idOferta);\n" +
"Alter table Miembros add constraint FK_MiembrosClientes FOREIGN KEY (idCliente) References Clientes(idCliente);\n" +
"Alter table Miembros add constraint FK_MiembrosAsociaciones FOREIGN KEY (idAsociacion) References Asociaciones(idAsociacion);\n" +
"Alter table VentasDetalle add constraint FK_VenDetVentas FOREIGN KEY (idVenta) References Ventas(idVenta);\n" +
"Alter table VentasDetalle add constraint FK_VenDetPresentaciones FOREIGN KEY (idPresentacion) References PresentacionesProducto(idPresentacion);\n" +
"Alter table Clientes add constraint FK_ClientesCiudades FOREIGN KEY (idCiudad) References Ciudades(idCiudad);\n" +
"Alter table ClientesCultivos add constraint FK_CliCultivosClientes FOREIGN KEY (idCliente) References Clientes(idCliente);\n" +
"Alter table ClientesCultivos add constraint FK_CliCultCultivos FOREIGN KEY (idCultivo) References Cultivos(idCultivo);\n" +
"Alter table ClientesCultivos add constraint FK_CliCultivosCiudades FOREIGN KEY (idCiudad) References Ciudades(idCiudad);\n" +
"Alter table Ventas add constraint FK_VentasClientes FOREIGN KEY (idCliente) References Clientes(idCliente);\n" +
"Alter table Ventas add constraint FK_VentasSucursales FOREIGN KEY (idSucursal) References Sucursales(idSucursal);\n" +
"Alter table Ventas add constraint FK_VentasEmpleados FOREIGN KEY (idEmpleado) References Empleados(idEmpleado);\n" +
"Alter table Facturas add constraint FK_FacturasVentas FOREIGN KEY (idVenta) References Ventas(idVenta);\n" +
"Alter table Visitas add constraint FK_VisitasCliCultivos FOREIGN KEY (idClienteCultivo) References ClientesCultivos(idClienteCultivo);\n" +
"Alter table Visitas add constraint FK_VisitasEmpleados FOREIGN KEY (idEmpleado) References Empleados(idEmpleado);\n" +
"Alter table Visitas add constraint FK_VisitasUnidadesTransporte FOREIGN KEY (idUnidadTransporte) References UnidadesTransporte(idUnidadTransporte);\n" +
"Alter table Tripulacion add constraint FK_TripulacionEmpleados FOREIGN KEY (idEmpleado) References Empleados(idEmpleado);\n" +
"Alter table Tripulacion add constraint FK_TripulacionEnvios FOREIGN KEY (idEnvio) References Envios(idEnvio);\n" +
"Alter table Cobros add constraint FK_CobrosVentas FOREIGN KEY (idVenta) References Ventas(idVenta);\n" +
"Alter table Cobros add constraint FK_CobrosFormasPago FOREIGN KEY (idFormaPago) References FormasPago(idFormaPago);\n" +
"Alter table Envios add constraint FK_EnviosVentas FOREIGN KEY (idVenta) References Ventas(idVenta);\n" +
"Alter table Envios add constraint FK_EnviosUTransporte FOREIGN KEY (idUnidadTransporte) References UnidadesTransporte(idUnidadTransporte);\n" +
"Alter table Envios add constraint FK_EEnviosCiudades FOREIGN KEY (idCiudad) References Ciudades(idCiudad);\n" +
"Alter table Mantenimientos add constraint FK_MantenimientosUTransporte FOREIGN KEY (idUnidadTransporte) References UnidadesTransporte(idUnidadTransporte);";
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAtras;
    private javax.swing.JButton bInstalar;
    private javax.swing.JButton bSiguiente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lAdmon;
    private javax.swing.JLabel lAvisos;
    private javax.swing.JLabel lConexion;
    private javax.swing.JLabel lContra1;
    private javax.swing.JLabel lContra2;
    private javax.swing.JLabel lContraSQL;
    private javax.swing.JLabel lIntro;
    private javax.swing.JLabel lPuerto;
    private javax.swing.JLabel lRuta;
    private javax.swing.JLabel lRuta2;
    private javax.swing.JLabel lSQL;
    private javax.swing.JLabel lServidor;
    private javax.swing.JLabel lTermino;
    private javax.swing.JLabel lUsuario;
    private daltonik_erp.PanelIMG pFondo;
    private javax.swing.JTextField tContra1;
    private javax.swing.JTextField tContra2;
    private javax.swing.JTextField tContraSQL;
    private javax.swing.JTextField tPuerto;
    private javax.swing.JTextField tRuta;
    private javax.swing.JTextField tSQL;
    private javax.swing.JTextField tServidor;
    private javax.swing.JTextField tUsu;
    // End of variables declaration//GEN-END:variables
}
